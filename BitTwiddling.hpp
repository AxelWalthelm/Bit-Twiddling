#pragma once
#include <stdint.h>

namespace
{

inline int bits_popcount(uint32_t x)
{
	x = ((x >> 0x01) & 0x55555555u) + (x & 0x55555555u);
	x = ((x >> 0x02) & 0x33333333u) + (x & 0x33333333u);
	x = ((x >> 0x04) & 0x0f0f0f0fu) + (x & 0x0f0f0f0fu);
	x = ((x >> 0x08) & 0x00ff00ffu) + (x & 0x00ff00ffu);
	x = ((x >> 0x10) & 0x0000ffffu) + (x & 0x0000ffffu);
	return x;
}

inline int bits_ffs(uint32_t x)
{
	if (x == 0)
		return 0;

	int n = 2;
	if ((x & 0x0000FFFFu) == 0) n += 0x10, x >>= 0x10;
	if ((x & 0x000000FFu) == 0) n += 0x08, x >>= 0x08;
	if ((x & 0x0000000Fu) == 0) n += 0x04, x >>= 0x04;
	if ((x & 0x00000003u) == 0) n += 0x02, x >>= 0x02;
	return n - (x & 1);
}

// abcdefgh -> hgfedcb, where a, b, c, d, e, f, g, h in {0, 1}
/*
                                    abcdefgh
            abcdefghabcdefghabcdefghabcdefgh       (!)      FEDCBA9876543210FEDCBA9876543210
1            ...e...                                  <<1   00000000000000000000000000000010
2                              ..f...b                <<19  00000000000010000000000000000000
1                        .g...c.                      <<13  00000000000000000010000000000000
-                                          h...-..    <<31  10000000000000000000000000000000
+                  -...d..                            <<7   00000000000000000000000010000000
            ------------------------------------            10000000000010000010000010000010 = 0x80082082u 
            00001000000100100010010001000001 = 0x08122441u
                e      d  g   c  f   b     h
            ------------------------------------
            hgfedcb
*/
inline uint8_t bits_rev7(uint8_t x)
{
	return uint8_t(((uint32_t(x) * 0x01010101u) & 0x08122441u) * 0x80082082u >> 25); // 4 ops (2 mult)
}


/*
full: [22, 28, 10, 0, 22, 4, 10]

    hgfedcbahgfedcbahgfedcbahgfedcba   zeros l/r: 0/0
                          b......         <<22 00000000010000000000000000000000
                                .c.....   <<28 00010000000000000000000000000000
              ..d....                     <<10 00000000000000000000010000000000
    ...e...                               << 0 00000000000000000000000000000001
                          ....f..         <<22 00000000010000000000000000000000
        .....g.                           << 4 00000000000000000000000000010000
              ......h                     <<10 00000000000000000000010000000000
    --------------------------------
    bcdefgh

f(x) = (x * 0x1010101u & 0x10488224u) * 0x10400411u
f(x) = (x * 0b1000000010000000100000001u & 0b10000010010001000001000100100u) * 0b10000010000000000010000010001u

full: [30, 12, 18, 0, 6, 12, 18]

    hgfedcbahgfedcbahgfedcbahgfedcba   zeros l/r: 0/0
                                  b......   <<30 01000000000000000000000000000000
                .c.....                     <<12 00000000000000000001000000000000
                      ..d....               <<18 00000000000001000000000000000000
    ...e...                                 << 0 00000000000000000000000000000001
          ....f..                           << 6 00000000000000000000000001000000
                .....g.                     <<12 00000000000000000001000000000000
                      ......h               <<18 00000000000001000000000000000000
    --------------------------------
    bcdefgh

f(x) = (x * 0x1010101u & 0x10244882u) * 0x40041041u
f(x) = (x * 0b1000000010000000100000001u & 0b10000001001000100100010000010u) * 0b1000000000001000001000001000001u
*/

inline uint8_t bits_rev8(uint8_t x)
{
	//f(x) = (x * 0x1010101u & 0x10488224u) * 0x10400411u
	return uint8_t((((uint32_t(x) * 0x01010101u) & 0x10488224u) * 0x10400411u >> 25) | (x << 7)); // 6 ops (2 mult, 32 bit only)
}



} // anonymous namespace
